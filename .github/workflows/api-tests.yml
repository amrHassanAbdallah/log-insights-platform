name: API Tests

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/api/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/api/**'

jobs:
  test:
    name: Run API Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: islamicfinanceguru_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/api/package-lock.json

      - name: Install dependencies
        working-directory: backend/api
        run: npm ci

      - name: Create test database
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE islamicfinanceguru_test;"
        env:
          PGPASSWORD: postgres

      - name: Run linting
        working-directory: backend/api
        run: npm run lint

      - name: Run tests
        working-directory: backend/api
        env:
          NODE_ENV: test
          TEST_DB_HOST: localhost
          TEST_DB_PORT: 5432
          TEST_DB_USERNAME: postgres
          TEST_DB_PASSWORD: postgres
          TEST_DB_NAME: islamicfinanceguru_test
        run: npm run test:e2e


      - name: Check test coverage
        working-directory: backend/api
        run: |
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)")
            if (( $(echo "$COVERAGE < 80" | bc -l) )); then
              echo "Test coverage is below 80% (current: $COVERAGE%)"
              exit 1
            fi
          fi 