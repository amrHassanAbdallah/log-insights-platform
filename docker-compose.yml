version: '3.8'

services:
  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    env_file:
      - ./backend/api/.env
    environment:
      - NODE_ENV=production
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=dealbot
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000/graphql
    depends_on:
      - api
    networks:
      - app-network

  ingestor:
    build:
      context: ./backend/ingestor
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DB_HOST=timescaledb
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=dealbot
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET=${AWS_S3_BUCKET}
    command: node dist/main watch -b ${AWS_S3_BUCKET} -i 600
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - app-network

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: dealbot
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  timescaledb_data:

networks:
  app-network:
    driver: bridge 