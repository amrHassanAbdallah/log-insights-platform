version: '3.8'

services:
  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      DB_HOST: timescaledb
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      NODE_ENV: production
    depends_on:
      timescaledb:
        condition: service_healthy
    volumes:
      - ./backend/api:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - app-network
    restart: unless-stopped

  ingestor:
    build:
      context: .
      dockerfile: packages/ingestor/Dockerfile
    volumes:
      - ./packages:/usr/src/app/packages
      - /usr/src/app/packages/ingestor/node_modules
      - /usr/src/app/packages/shared/node_modules
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${DB_USERNAME}:${DB_PASSWORD}@timescaledb:${DB_PORT}/${DB_DATABASE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      AWS_S3_KEY: ${AWS_S3_KEY}
    depends_on:
      - timescaledb
    networks:
      - app-network
    restart: unless-stopped

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      TIMESCALEDB_TELEMETRY: off
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://timescaledb:5432/sonarqube
      - SONAR_JDBC_USERNAME=postgres
      - SONAR_JDBC_PASSWORD=postgres
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      timescaledb:
        condition: service_healthy
    networks:
      - app-network

volumes:
  timescaledb_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:

networks:
  app-network:
    driver: bridge 